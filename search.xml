<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>滑动窗口---最小覆盖子串</title>
      <link href="/2023/01/09/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
      <url>/2023/01/09/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h4><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p> <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li><code>m == s.length</code></li><li><code>n == t.length</code></li><li><code>1 &lt;= m, n &lt;= 105</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><p><strong>进阶：</strong>你能设计一个在 <code>o(m+n)</code> 时间内解决此问题的算法吗？</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><ul><li>可以用滑动窗口来找出符合条件的子串</li><li>然后找到符合条件的子串之后，通过缩小窗口找到最优解</li><li>然后从符合条件的子串中找到长度最短的子串</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>滑动窗口的实现<ol><li>用left指针和right指针维护(还可以只用left,right可以通过for循环维护)</li></ol></li><li>判断符合条件的实现<ol><li>count统计t子串的数量</li><li>need[i]数组判断s字符串中有无t子串</li></ol></li><li>判断最小的子串<ol><li>用一个size来维护最小值</li></ol></li></ul><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><video src="source/vedio/最小覆盖子串.wmv"></video></p><p> <a href="source/ppt/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.pptx">最小覆盖子串.pptx</a> </p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/2022/12/09/hexo%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/09/hexo%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h1><ul><li>hexo clean</li></ul><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><ul><li>hexo generate(一般简写成hexo g即可)</li></ul><h1 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h1><ul><li>hexo deploy(一般简写成hexo d即可)</li></ul><h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><ul><li><p>hexo server 命令用于启动本地服务器(一般可以简写成hexo s)</p></li><li><p>可以加一些参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p 选项：指定服务器端口，默认为4000</span><br><span class="line">-i 选项：指定服务器IP地址，默认为0,0,0,0</span><br><span class="line">-s 静态模式,仅提供public文件夹中的文件并禁用文件监视</span><br></pre></td></tr></table></figure></li></ul><h1 id="生成一篇新文章"><a href="#生成一篇新文章" class="headerlink" title="生成一篇新文章"></a>生成一篇新文章</h1><ul><li>hexo new page tags</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="如果想你的本地端更新到github"><a href="#如果想你的本地端更新到github" class="headerlink" title="如果想你的本地端更新到github"></a>如果想你的本地端更新到github</h2><ol><li>一般先hexo clean</li><li>然后hexo g</li><li>最后hexo d</li><li>你的浏览器才可以成功更新到github那里</li></ol><ul><li>但是平时一般测试的话，只需要hexo s即可，但是最后的最后别忘了上面那一步！！！</li><li><strong>注意:要在Blog的本目录下打开 git bash</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
