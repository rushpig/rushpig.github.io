<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HashMap和HashSet经常用的api</title>
      <link href="/2023/01/18/HashMap%E5%B8%B8%E7%94%A8api%E5%92%8C%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/18/HashMap%E5%B8%B8%E7%94%A8api%E5%92%8C%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap和HashSet经常用的api"><a href="#HashMap和HashSet经常用的api" class="headerlink" title="HashMap和HashSet经常用的api"></a>HashMap和HashSet经常用的api</h1><h2 id="常用的api"><a href="#常用的api" class="headerlink" title="常用的api"></a>常用的api</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li><p>&#x2F;&#x2F;添加key,value</p><p>map.put(key,value);</p></li><li><p>&#x2F;&#x2F;直接得到（经常忘记）</p><p>map.get(i);&#x2F;&#x2F;注意：这个返回的是value,传入和参数是key</p></li><li><p>&#x2F;&#x2F;还有一个算法题经常会用到的（也经常忘记）map.getOrDefault(key,defaultValue);&#x2F;&#x2F;返回的是value</p></li><li><p>&#x2F;&#x2F;是否包含</p><p>map.containsKey();</p><p>map.containsValue();</p></li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li><p>&#x2F;&#x2F;添加</p><p>set.add();</p></li><li><p>&#x2F;&#x2F;是否包含<br>set.contains();</p></li></ul><h2 id="遍历方式-x2F-x2F-经常忘记"><a href="#遍历方式-x2F-x2F-经常忘记" class="headerlink" title="遍历方式&#x2F;&#x2F;经常忘记"></a>遍历方式&#x2F;&#x2F;经常忘记</h2><h3 id="HashSet-1"><a href="#HashSet-1" class="headerlink" title="HashSet"></a>HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代遍历</span></span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line"></span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String str : set)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-1"><a href="#HashMap-1" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//entrySet遍历,在键和值都需要时使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“key=”+entry.getKey() +”, value=”+entry.getValue());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keySet或values来实现遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map中的键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer key : map.keySet())&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“key=”+key);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历map中的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Integer value : map.values())&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“value=”+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Iterator遍历</span></span><br><span class="line"></span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer,Integer&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">Map.Entry&lt;Integer,Integer&gt; entry =it.next();</span><br><span class="line"></span><br><span class="line">System.out.println(“key=”+entry.getKey()+”,value=”+entry.getValue());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//java8 Lambda</span></span><br><span class="line"></span><br><span class="line">语法看起来虽然更简介，可以同时拿到key和value，性能低于entrySet</span><br><span class="line"></span><br><span class="line">map.forEach((key,value)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(key+”:”+value);</span><br><span class="line"></span><br><span class="line">&#125;;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​实际开发中的项目中会经常用到，要熟记，不要一用就百度。</p><p>发现实际工作上很容易使用，不只是算法题，所以记录下来</p><p>还有之前的总结，还有go</p><p>还有分布式那个也记得总结</p><p>实习东西</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针---三数之和</title>
      <link href="/2023/01/17/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/01/17/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h4><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><ul><li>这题很明显就是用双指针</li><li>先排序（不要忘记！！！！经常忘记）</li><li>然后固定住一个指针，然后在这个指针后面定义两个指针进行范围的增减</li></ul><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul><li>去重<ul><li>eg[0,0,0]</li><li>不但固定住的那个指针，还是后面定义的两个指针，都会可能有重复的出现，这样会导致多种重复的结果，所以注意去重</li></ul></li></ul><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="comment">//除了内部去重，外部也要</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=i+<span class="number">1</span>,right=nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;<span class="comment">//这里应该是用while的，不是用if</span></span><br><span class="line">                    <span class="keyword">if</span>(left&lt;right&amp;&amp;nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left&lt;right&amp;&amp;nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="comment">//相同的跳过,就是去重，忘记在哪里去了</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="type">List</span> <span class="variable">smallList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">                        smallList.add(nums[i]);</span><br><span class="line">                        smallList.add(nums[left]);</span><br><span class="line">                        smallList.add(nums[right]);</span><br><span class="line">                        list.add(smallList);</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[0,0,0,0] 这个是外部的去重</span></span><br><span class="line">        </span><br><span class="line">               </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营第一天_go基础与实战</title>
      <link href="/2023/01/15/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9_go%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
      <url>/2023/01/15/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9_go%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是go语言"><a href="#1-什么是go语言" class="headerlink" title="1 什么是go语言"></a>1 什么是go语言</h2><ol><li>高性能，高并发</li><li>语法简单</li><li>丰富的标准库</li><li>完善的工具链</li><li>静态链接</li><li>快速编译</li><li>跨平台</li><li>垃圾回收</li></ol><h2 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2 基础语法"></a>2 基础语法</h2><h3 id="2-1-输出hello-world"><a href="#2-1-输出hello-world" class="headerlink" title="2.1 输出hello world"></a>2.1 输出hello world</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main//main包的一部分，程序的入口包,程序入口文件</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;//输入输出包</span><br><span class="line">)</span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Println(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go run example/01-hello/main.go</span><br><span class="line">//会输出hello world</span><br><span class="line">go build example/01-hello/mian.go</span><br><span class="line">./main</span><br><span class="line">//会输出hello world</span><br></pre></td></tr></table></figure><h3 id="2-2-变量类型"><a href="#2-2-变量类型" class="headerlink" title="2.2 变量类型"></a>2.2 变量类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">)</span><br><span class="line">func main()&#123;</span><br><span class="line">var a = &quot;initial&quot;</span><br><span class="line">var b,c int = 1,2</span><br><span class="line">var d=true</span><br><span class="line">    var e float64   </span><br><span class="line">    f :=float32(e) //:=(值) 可以声明一个变量</span><br><span class="line">    g :=a+&quot;foo&quot;   //字符串可以直接拼接</span><br><span class="line">    fmt.Println(a,b,c,d,e,f)</span><br><span class="line">    fmt.Println(g)</span><br><span class="line"></span><br><span class="line">    const s string=&quot;constant&quot; //const没有变量类型，可以根据上下文来确定变量的类型</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-if-else"><a href="#2-3-if-else" class="headerlink" title="2.3 if-else"></a>2.3 if-else</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">if 7%2 == 0&#123;</span><br><span class="line">fmt.Println(&quot;7 is even&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">fmt.Println(&quot;7 is odd&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if 8%4 == 0&#123;</span><br><span class="line">fmt.Println(&quot;8 is divisible by 4&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if num :=9;num&lt;0&#123;//这里有点不是很懂</span><br><span class="line">fmt.Println(num,&quot;is negative&quot;)</span><br><span class="line">&#125;else if num &lt; 10&#123;</span><br><span class="line">fmt.Println(num,&quot;has 1 digit&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">fmt.Println(num,&quot;has mutiple digits&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-基础语法-循环"><a href="#2-4-基础语法-循环" class="headerlink" title="2.4 基础语法-循环"></a>2.4 基础语法-循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">i := 1</span><br><span class="line">for&#123;</span><br><span class="line">fmt.Println(&quot;loop&quot;)</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">for j:= 7; j&lt;9; j++ &#123;</span><br><span class="line">fmt.Println(j)</span><br><span class="line">&#125;</span><br><span class="line">for n := 0; n &lt;5; n++&#123;</span><br><span class="line">if n%2 ==0&#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line">for i &lt;= 3 &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">i=i+1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-swtich"><a href="#2-5-swtich" class="headerlink" title="2.5  swtich"></a>2.5  swtich</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line">func main()&#123;</span><br><span class="line">a := 2</span><br><span class="line">switch a&#123;</span><br><span class="line">case 1:</span><br><span class="line">fmt.Println(&quot;one&quot;)</span><br><span class="line">case 2:</span><br><span class="line">fmt.Println(&quot;two&quot;)</span><br><span class="line">...</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;other&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t := time.Now()</span><br><span class="line">switch&#123;</span><br><span class="line">case t.Hour() &lt; 12:</span><br><span class="line">fmt.Println(&quot;It...&quot;)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;...&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-数组"><a href="#2-6-数组" class="headerlink" title="2.6 数组"></a>2.6 数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span><span class="comment">//写入第四个位置的值</span></span><br><span class="line">fmt.Println(a[<span class="number">4</span>],<span class="built_in">len</span>(a))  <span class="comment">//真实很少用数组，因为长度固定，一般都用切片</span></span><br><span class="line"></span><br><span class="line">b := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++&#123;</span><br><span class="line"><span class="keyword">for</span> j :=<span class="number">0</span>; j&lt;<span class="number">3</span>;j++&#123;</span><br><span class="line">twoD[i][j] =i+j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;2d&quot;</span>,twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7切片"><a href="#2-7切片" class="headerlink" title="2.7切片"></a>2.7切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s := <span class="built_in">make</span>([]<span class="type">string</span>,<span class="number">3</span>) <span class="comment">//用Make创作切片</span></span><br><span class="line">    s[<span class="number">0</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    s[<span class="number">1</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">    s[<span class="number">2</span>]=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;get:&quot;</span>,s[<span class="number">2</span>])<span class="comment">//c</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>,<span class="built_in">len</span>(s))<span class="comment">//3</span></span><br><span class="line">    </span><br><span class="line">    s = <span class="built_in">append</span>(s,<span class="string">&quot;d&quot;</span>) <span class="comment">//赋值回去?</span></span><br><span class="line">    s = <span class="built_in">append</span>(s,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    c :=<span class="built_in">make</span>([]<span class="type">string</span>,<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="built_in">copy</span>(c,s)</span><br><span class="line">    fmt.Println(c)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(s[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment">//[c d e]</span></span><br><span class="line">    fmt.Println(s[:<span class="number">5</span>]) <span class="comment">//[a b c d e]</span></span><br><span class="line">    fmt.Println(s[<span class="number">2</span>:]) <span class="comment">//[c d e f]</span></span><br><span class="line">    </span><br><span class="line">    good := []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">    fmt.Println(good) <span class="comment">// [g o o d]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-基础语法-map"><a href="#2-8-基础语法-map" class="headerlink" title="2.8 基础语法-map"></a>2.8 基础语法-map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">m :=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">m[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">fmt.Println(m)    <span class="comment">//map[one:1 two:2]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m))  <span class="comment">//2</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;one&quot;</span>]) <span class="comment">//1</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;unknow&quot;</span>]) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">r, ok :=m[<span class="string">&quot;unknow&quot;</span>]</span><br><span class="line">fmt.Println(r,ok) <span class="comment">//0 false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">&quot;one&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m2 :=<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m3=<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>,<span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(m2,m3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-range"><a href="#2-9-range" class="headerlink" title="2.9 range"></a>2.9 range</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">nums :=[]int&#123;2,3,4&#125;</span><br><span class="line">sum :=0</span><br><span class="line">for i,num := range nums&#123;</span><br><span class="line">sum +=num</span><br><span class="line">if num == 2&#123;</span><br><span class="line">fmt.Println(&quot;index:&quot;,i,&quot;num:&quot;,num) //index: 0 num: 2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">m := map[string]string(&quot;a&quot;:&quot;A&quot;,&quot;b&quot;:&quot;B&quot;);</span><br><span class="line">for k,v :=range m&#123;</span><br><span class="line">fmt.Println(k,v)</span><br><span class="line">&#125;</span><br><span class="line">for k :=range m&#123;</span><br><span class="line">fmt.Prinln(&quot;key&quot;,k)  //key a;key b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-函数"><a href="#2-10-函数" class="headerlink" title="2.10 函数"></a>2.10 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回两个值*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>,k <span class="type">string</span>)</span></span>(v <span class="type">string</span>,ok <span class="type">bool</span>)&#123;</span><br><span class="line">    v, ok = m[k]</span><br><span class="line">    <span class="keyword">return</span> v,ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    res :=add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">    </span><br><span class="line">    v,ok :=exists(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;A&quot;</span>&#125;,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(v,ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-11指针"><a href="#2-11指针" class="headerlink" title="2.11指针"></a>2.11指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(n <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    n += <span class="number">2</span> <span class="comment">//实际这个参数是拷贝，没有真正改变 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2ptr</span><span class="params">(n *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    *n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n := <span class="number">5</span></span><br><span class="line">    add2(n)</span><br><span class="line">    fmt.Println(n) <span class="comment">//5</span></span><br><span class="line">    add2ptr(&amp;n)</span><br><span class="line">    fmt.Println(n) <span class="comment">//7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-12-结构体"><a href="#2-12-结构体" class="headerlink" title="2.12 结构体"></a>2.12 结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user strcut&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a :=user&#123;name :<span class="string">&quot;wang&quot;</span>,password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">b :=user&#123;<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">c :=user&#123;name: <span class="string">&quot;wang&quot;</span>&#125;</span><br><span class="line">c.password =<span class="string">&quot;1024&quot;</span></span><br><span class="line"><span class="keyword">var</span> d user</span><br><span class="line">d.name=<span class="string">&quot;wang&quot;</span></span><br><span class="line">d.password=<span class="string">&quot;1024&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(a,b,c,d)  <span class="comment">//&#123;wang 1024&#125;&#123;wang 1024&#125;&#123;wang 1024&#125;</span></span><br><span class="line">fmt.Println(checkPassword(a,<span class="string">&quot;haha&quot;</span>)) <span class="comment">//false</span></span><br><span class="line">fmt.Println(checkPassword(&amp;a,<span class="string">&quot;haha&quot;</span>)) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u user,password <span class="type">string</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u *user,password <span class="type">string</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u *user ,password <span class="type">string</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-13-结构体方法"><a href="#2-13-结构体方法" class="headerlink" title="2.13 结构体方法"></a>2.13 结构体方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加个括号就能变成成员函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> checkPassword(password <span class="type">string</span>) <span class="type">bool</span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> resetPassword(password <span class="type">string</span>)&#123;</span><br><span class="line">    a :=user&#123;name: <span class="string">&quot;wang&quot;</span>,password :<span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">    a.resetPassword(<span class="string">&quot;2048&quot;</span>)</span><br><span class="line">    fmt.Println(a.checkPassword(<span class="string">&quot;2048&quot;</span>))<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-14-错误处理"><a href="#2-14-错误处理" class="headerlink" title="2.14  错误处理"></a>2.14  错误处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">&quot;error&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(user []user,name <span class="type">string</span>)</span></span>(v *user,err <span class="type">error</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> _, U :=<span class="keyword">range</span> users&#123;</span><br><span class="line">        <span class="keyword">if</span> u.name == name&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;u,<span class="literal">nil</span><span class="comment">//返回两个值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>,<span class="type">error</span>.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u,err :=findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;1024&quot;</span>&#125;&#125;,<span class="string">&quot;wang&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span>  <span class="comment">//没有err才可以真正返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(u.name) <span class="comment">//wang</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> u,err :=findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;1024&quot;</span>&#125;&#125;,<span class="string">&quot;li&quot;</span>);err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(u.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-15字符串操作"><a href="#2-15字符串操作" class="headerlink" title="2.15字符串操作"></a>2.15字符串操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;string&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    fmt.Println(strings.Contains(a,<span class="string">&quot;li&quot;</span>)) <span class="comment">//true</span></span><br><span class="line">    fmt.Println(strings.Count(a,<span class="string">&quot;l&quot;</span>)) <span class="comment">//2</span></span><br><span class="line">    fmt.Println(strings.HasPrefix(a,<span class="string">&quot;he&quot;</span>)) <span class="comment">//true</span></span><br><span class="line">    fmt.Println(strings.HasSuffix(a,<span class="string">&quot;llo&quot;</span>)) <span class="comment">//true</span></span><br><span class="line">    fmt.Println(strings.Index(a,<span class="string">&quot;ll&quot;</span>))   <span class="comment">//2</span></span><br><span class="line">    fmt.Println()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\xie\AppData\Roaming\Typora\typora-user-images\image-20230115160506806.png" alt="image-20230115160506806"></p><h3 id="2-16-字符串格式化"><a href="#2-16-字符串格式化" class="headerlink" title="2.16 字符串格式化"></a>2.16 字符串格式化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x,y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s :=<span class="string">&quot;hello&quot;</span></span><br><span class="line">    n :=<span class="number">123</span></span><br><span class="line">    p :=point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">    fmt.Println(s,n)  <span class="comment">//hello</span></span><br><span class="line">    fmt.Println(p)    <span class="comment">//&#123;1,2&#125;</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;s=%v\n&quot;</span>,s) <span class="comment">//s=hello</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;n=%v\n&quot;</span>,n) <span class="comment">//n==123</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;p=%v\n&quot;</span>,p) <span class="comment">//p=&#123;1 2&#125;//打印出值</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;p=%+v\n&quot;</span>,p)<span class="comment">//p=&#123;x:1 y:2&#125;  //%+v会打印出字段的名字和值</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;p=%#v\n&quot;</span>,p)<span class="comment">//p=main.point&#123;x:1,y:2&#125; //%#v打印出整个构造类型名称和值</span></span><br><span class="line">    </span><br><span class="line">    f :=<span class="number">3.141592653</span></span><br><span class="line">    fmt.Println(f)          <span class="comment">//3.141592653</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;%.2f\n&quot;</span>,f) <span class="comment">//3.14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-17-JSON操作"><a href="#2-17-JSON操作" class="headerlink" title="2.17 JSON操作"></a>2.17 JSON操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">//保证结构体的每一个字段都是大写,那这个结构体就可以用JSON的Marshal序列化</span><br><span class="line">type userInfo struct&#123;</span><br><span class="line">Name string</span><br><span class="line">Age int &#x27;json:&quot;age&quot;&#x27; //加了这个json...下面是输出的字段就变成小写了</span><br><span class="line">Hobby []string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">a := userIndo&#123;Name: &quot;wang&quot;,Age: 18,Hobby: []string&#123;&quot;Golang&quot;,&quot;TypeScript&quot;&#125;&#125;</span><br><span class="line">buf ,err :=json.Marshal(a)//序列化之后变成buf数组，简单理解成字符串</span><br><span class="line">if err !=nil&#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf)//&#123;123 34 78 97&#125;</span><br><span class="line">fmt.Println(string(buf)) //&#123;&quot;name&quot;:&quot;wang&quot;,&quot;age&quot;:18,&quot;Hobby&quot;:[&quot;Golang&quot;,&quot;typeScript&quot;]&#125;</span><br><span class="line"></span><br><span class="line">buf,err=json.MarshalIndent(a,&quot;&quot;,&quot;\t&quot;)</span><br><span class="line">if err !=nil&#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(string(buf))</span><br><span class="line"></span><br><span class="line">var b userInfo</span><br><span class="line">err=json.Unmarshal(buf,&amp;b) //反序列化</span><br><span class="line">if err !=nil&#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%#v\n&quot;,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-18时间处理"><a href="#2-18时间处理" class="headerlink" title="2.18时间处理"></a>2.18时间处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">now :=time.Now()</span><br><span class="line">fmt.Println(now) //2022-03-27 18.....</span><br><span class="line">t </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xie\AppData\Roaming\Typora\typora-user-images\image-20230115170954026.png" alt="image-20230115170954026"></p><h3 id="2-19-数字解析"><a href="#2-19-数字解析" class="headerlink" title="2.19 数字解析"></a>2.19 数字解析</h3><p><img src="C:\Users\xie\AppData\Roaming\Typora\typora-user-images\image-20230115171333240.png" alt="image-20230115171333240"></p><h3 id="2-20-进程信息"><a href="#2-20-进程信息" class="headerlink" title="2.20 进程信息"></a>2.20 进程信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//go run example/20-env/main.go a b c d</span></span><br><span class="line">fmt.Println(os.Args)<span class="comment">//[/var/folders/8p/n34xxfnx38d...]</span></span><br><span class="line">fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>)) <span class="comment">//usr/local/go/bin..</span></span><br><span class="line">fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>))</span><br><span class="line"></span><br><span class="line">buf,err := exec.Command(<span class="string">&quot;grep&quot;</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;/etc/hosts&quot;</span>).CombineOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">//127.0.0.1 localhost</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go基础</title>
      <link href="/2023/01/12/go%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/12/go%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营_后端专场</title>
      <link href="/2023/01/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AE%AD%E7%BB%83%E8%90%A5_day1/"/>
      <url>/2023/01/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AE%AD%E7%BB%83%E8%90%A5_day1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 字节跳动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录训练营_day2</title>
      <link href="/2023/01/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AE%AD%E7%BB%83%E8%90%A5_day2/"/>
      <url>/2023/01/12/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AE%AD%E7%BB%83%E8%90%A5_day2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习碎碎念__jvm影响性能</title>
      <link href="/2023/01/12/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%861/"/>
      <url>/2023/01/12/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%861/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;还有啥内存泄漏</p>]]></content>
      
      
      
        <tags>
            
            <tag> 蔚来实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库管理系统---TM</title>
      <link href="/2023/01/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F---TM/"/>
      <url>/2023/01/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F---TM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口---最小覆盖子串</title>
      <link href="/2023/01/09/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
      <url>/2023/01/09/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h4><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p> <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li><code>m == s.length</code></li><li><code>n == t.length</code></li><li><code>1 &lt;= m, n &lt;= 105</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><p><strong>进阶：</strong>你能设计一个在 <code>o(m+n)</code> 时间内解决此问题的算法吗？</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><ul><li>可以用滑动窗口来找出符合条件的子串</li><li>然后找到符合条件的子串之后，通过缩小窗口找到最优解</li><li>然后从符合条件的子串中找到长度最短的子串</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>滑动窗口的实现<ol><li>用left指针和right指针维护(还可以只用left,right可以通过for循环维护)</li></ol></li><li>判断符合条件的实现<ol><li>count统计t子串的数量</li><li>need[i]数组判断s字符串中有无t子串</li></ol></li><li>判断最小的子串<ol><li>用一个size来维护最小值</li></ol></li></ul><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p>​图解详情看leetcode</p><p>​不知道为啥插入不了..</p><p>​<a href="https://leetcode.cn/problems/minimum-window-substring/solution/by-chong-ya-de-zhu-pz4w/">https://leetcode.cn/problems/minimum-window-substring/solution/by-chong-ya-de-zhu-pz4w/</a></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(t.length()&gt;s.length())<span class="comment">//还有空的情况也没有考虑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,start=<span class="number">0</span>;<span class="comment">//左右指针</span></span><br><span class="line">        <span class="type">int</span> max=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> need[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="type">int</span> count=t.length();</span><br><span class="line">        <span class="comment">//把需要的计算的字符串放进need数组里面</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            need[t.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(need[s.charAt(i)]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//就是说明包含子串的字符</span></span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            need[s.charAt(i)]--;</span><br><span class="line">            <span class="comment">//  System.out.println(count);</span></span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//就是找到了一个</span></span><br><span class="line">                <span class="keyword">while</span>(left&lt;i&amp;&amp;need[s.charAt(left)]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    need[s.charAt(left)]++;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i-left+<span class="number">1</span>&lt;max)&#123;</span><br><span class="line">                    max=i-left+<span class="number">1</span>;</span><br><span class="line">                    start=left;</span><br><span class="line">                &#125;</span><br><span class="line">                need[s.charAt(left)]++;<span class="comment">//下面这三个我不是很了解</span></span><br><span class="line">                left++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max==Integer.MAX_VALUE?<span class="string">&quot;&quot;</span>:s.substring(start,start+max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/2022/12/09/hexo%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/09/hexo%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h1><ul><li>hexo clean</li></ul><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><ul><li>hexo generate(一般简写成hexo g即可)</li></ul><h1 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h1><ul><li>hexo deploy(一般简写成hexo d即可)</li></ul><h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><ul><li><p>hexo server 命令用于启动本地服务器(一般可以简写成hexo s)</p></li><li><p>可以加一些参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p 选项：指定服务器端口，默认为4000</span><br><span class="line">-i 选项：指定服务器IP地址，默认为0,0,0,0</span><br><span class="line">-s 静态模式,仅提供public文件夹中的文件并禁用文件监视</span><br></pre></td></tr></table></figure></li></ul><h1 id="生成一篇新文章"><a href="#生成一篇新文章" class="headerlink" title="生成一篇新文章"></a>生成一篇新文章</h1><ul><li>hexo new page (page是文章的名字)</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="如果想你的本地端更新到github"><a href="#如果想你的本地端更新到github" class="headerlink" title="如果想你的本地端更新到github"></a>如果想你的本地端更新到github</h2><ol><li>一般先hexo clean</li><li>然后hexo g</li><li>最后hexo d</li><li>你的浏览器才可以成功更新到github那里</li></ol><ul><li>但是平时一般测试的话，只需要hexo s即可，但是最后的最后别忘了上面那一步！！！</li><li><strong>注意:要在Blog的本目录下打开 git bash</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
